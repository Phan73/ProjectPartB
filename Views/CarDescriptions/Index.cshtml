
@model IPagedList<ProjectPartB.Models.CarDescription>
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;
@{
    ViewData["Title"] = "Index";
}

<h1>Choose your car!!</h1>
@{
    // Check if the user is in the "Administrator" or "Visitor" role
    bool isUserAdminOrVisitor = User.IsInRole("Administrator") || User.IsInRole("Editor");
}@if (isUserAdminOrVisitor)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}
<form id="searchForm" action="/CarDescriptions/index" method="get">
    <p>Search Car Description</p>
    <input type="text" id="searchString" name="searchString" style="width:190px" autocomplete="off" onkeyup="AjaxRequest(this.value);" />
    <br />
    <div id="autoSuggestContainer" style="position:absolute; display:none;z-index:100;"></div>
    <input type="submit" value="Search" />

</form>
@Html.PagedListPager(Model, page => Url.Action("Index",new { Page = page }), new PagedListRenderOptions
{
LiElementClasses = new string[] { "page-item" },
PageClasses = new string[] { "page-link" }
})

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.First().ProductName)*@
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParam"]">@Html.DisplayNameFor(model => model.First().Brand)</a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Model)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Color)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().RatePerDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Available)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Image)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().CarTypeName)
            </th>
          
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                    @Html.Raw(item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Brand)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Model)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Color)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RatePerDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Available)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.Image)*@
                <img src="@Url.Content("~/uploads/"+item.Image)" alt="rental cars" width="160" height="150">
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CarTypeName)
            </td>
            
            <td>
                <a asp-action="Edit" asp-route-id="@item.CarDescriptionId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CarDescriptionId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CarDescriptionId">Delete</a>
                <a asp-controller="ShoppingCart" asp-action="AddToCart" asp-route-id="@item.CarDescriptionId" class="btn btn-primary">Add To Cart</a>
            </td>
        </tr>
}
    </tbody>
</table>
<script type="text/javascript">
    function AjaxRequest(searchString) {
        if (searchString.length < 2) {
            document.getElementById("autoSuggestContainer").innerHTML = "";
            return;
        }
        //alert ("Testing searchString="+ searchString)
        var xmlhttp = new XMLHttpRequest();
        var url = "/CarDescriptions/indexAjax?searchString" + searchString;
        xmlhttp.open("GET", url, false);
        xmlhttp.send();
        document.getElementById("autoSuggestContainer").style.display = "block";

        //need to clear out the container for a fresh auto-suggest list

        //else the auto-suggest list can keep growing and growing with additional user keyups

        document.getElementById("autoSuggestContainer").innerHTML = "";



        var messageObject = JSON.parse(xmlhttp.responseText); // receive the respose text



        var autoSuggestions = "";



        for (var i = 0; i < messageObject.length; i++) {

            //HTML code generation demo

            //Works together with the ".innerHTML" statement after the end of this "for" block

            autoSuggestions +=

                "<input type=\"button\" value=\"" + messageObject[i].Brand + "\" "

                + "onclick=\"document.getElementById('searchString').value = this.value; document.getElementById('searchForm').submit();\" "

                + "style =\"width: 280px\" />";

            autoSuggestions += "<br />";

        }

        //place the generated buttons HTML code inside the display div

        document.getElementById("autoSuggestContainer").innerHTML = autoSuggestions;


    }
</script>

